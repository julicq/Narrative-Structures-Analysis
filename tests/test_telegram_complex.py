from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import logging
from dotenv import load_dotenv
import os
import re
from typing import Dict, List, Tuple
import json

load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
DIALOGUE_PATTERN = r'["\'].*?["\']|[-‚Äî].*?[.!?]'
SCENE_HEADER_PATTERN = r'^(INT\.|EXT\.).+$'
ACTION_PATTERN = r'^[A-Z][^a-z]*$'

class TextAnalyzer:
    @staticmethod
    def analyze_text(text: str) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        # –ü–æ–¥—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        words = len(text.split())
        sentences = len(re.findall(r'[.!?]+', text))
        dialogues = len(re.findall(DIALOGUE_PATTERN, text, re.MULTILINE))
        scenes = len(re.findall(SCENE_HEADER_PATTERN, text, re.MULTILINE))
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        paragraphs = text.count('\n\n') + 1
        
        return {
            "words": words,
            "sentences": sentences,
            "dialogues": dialogues,
            "scenes": scenes,
            "paragraphs": paragraphs,
            "avg_words_per_sentence": round(words/max(sentences, 1), 2)
        }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data='analyze')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! üëã\n'
        '–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤. –Ø –º–æ–≥—É:\n'
        '‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞\n'
        '‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏ –∏ —Å—Ü–µ–Ω—ã\n'
        '‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n\n'
        '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n'
        '2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '   /analyze - –Ω–∞—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n'
        '   /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
        '   /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞\n\n'
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n'
        '‚Ä¢ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç\n'
        '‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏\n'
        '‚Ä¢ –î–∏–∞–ª–æ–≥–∏'
    )
    await update.message.reply_text(help_text)

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze."""
    keyboard = [
        [
            InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data='basic_analysis'),
            InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data='detailed_analysis')
        ],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:',
        reply_markup=reply_markup
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    analysis = TextAnalyzer.analyze_text(text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n'
        f'üìù –°–ª–æ–≤: {analysis["words"]}\n'
        f'üìà –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {analysis["sentences"]}\n'
        f'üí¨ –î–∏–∞–ª–æ–≥–æ–≤: {analysis["dialogues"]}\n'
        f'üé¨ –°—Ü–µ–Ω: {analysis["scenes"]}\n'
        f'üìã –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {analysis["paragraphs"]}\n'
        f'üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: {analysis["avg_words_per_sentence"]}\n\n'
        f'–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze'
    )
    
    await update.message.reply_text(response)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'help':
        await help_command(update, context)
    elif query.data == 'analyze':
        await analyze_command(update, context)
    elif query.data == 'cancel':
        await query.edit_message_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_text
    ))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(
        poll_interval=1.0,
        timeout=30,
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == '__main__':
    main()
