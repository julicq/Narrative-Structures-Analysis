# bot/telegram_bot.py

import os
from typing import Dict, Any
from dotenv import load_dotenv
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)
from narr_mod import StructureType
from service.evaluator import NarrativeEvaluator
from service import initialize_llm
from shared.config import settings, ModelType
import tempfile
from pathlib import Path
from app.file_handlers.doc_handler import extract_text as extract_doc_text
from app.file_handlers.pdf_handler import extract_text_from_pdf
from db.database import Database
from service.balance_service import BalanceService

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.application = None
        self._initialized = False
        self._running = False
        self.evaluator = None
        self.user_states: Dict[int, Dict[str, Any]] = {}
        self.user_data: Dict[int, Dict[str, Any]] = {}
        self.DEFAULT_TOKEN_BALANCE = 25_000
        self.PAGE_LIMIT = 120
        self.TOKENS_PER_PAGE = 500
        self.db = Database()
        self.balance_service = BalanceService()
        self.admin_id = 218293337
        self.message_queue = {}
        self.setup()

    def setup(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if self._initialized:
            return
            
        logger.info("Setting up Telegram bot...")
        
        try:
            self.application = Application.builder().token(settings.telegram_token).build()
            
            # Make sure we're passing a ModelType enum
            active_model = settings.active_model
            if isinstance(active_model, str):
                active_model = ModelType(active_model.lower())
            
            # Initialize evaluator with model
            model = initialize_llm(
                model_type=active_model,
                model_name=getattr(settings, f"{active_model}_model_name", None)
            )
            
            self.evaluator = NarrativeEvaluator(
                llm=model,
                gigachat_token=settings.gigachat_token,
                model_type=str(active_model)  # Convert to string if needed by NarrativeEvaluator
            )

            # Register handlers
            self.register_handlers()
            
        except Exception as e:
            logger.error(f"Error setting up bot: {e}")
            raise

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            raise RuntimeError("Application not initialized")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_message
        ))
        self.application.add_handler(CallbackQueryHandler(self.button))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ–∞–π–ª–æ–≤)
        self.application.add_handler(MessageHandler(
            filters.Document.ALL | filters.Document.DOC | 
            filters.Document.DOCX | filters.Document.PDF | 
            filters.Document.TXT,
            self.handle_document
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

        # –ë–∞–ª–∞–Ω—Å
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("limits", self.limits_command))
        self.application.add_handler(CommandHandler("add_tokens", self.add_tokens_request))
        self.application.add_handler(CommandHandler("approve_tokens", self.approve_tokens_command, filters=filters.User(user_id=self.admin_id)))

    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        if not self._initialized:
            self.setup()
        
        logger.info("Starting bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

        try:
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        finally:
            self.db.close()

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self._initialized:
            await self.setup()
                
        logger.info("Starting bot polling...")
        self._running = True
        
        # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å initialize() –∏ start() –æ—Ç–¥–µ–ª—å–Ω–æ
        await self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False  # –í–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
    )

    def get_main_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = [
            [KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É"), KeyboardButton("–ü–æ–º–æ—â—å")],
            [KeyboardButton("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.effective_user:
            return
                
        user = update.effective_user
        user_id = user.id
        user_data = self.db.get_user_data(user_id)
        chat_id = update.effective_chat.id
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "token_balance" not in user_data:
            self.db.update_user_balance(user_id, self.DEFAULT_TOKEN_BALANCE)
            balance = self.DEFAULT_TOKEN_BALANCE
        else:
            balance = user_data["token_balance"]
        if balance == 0:
            self.db.update_user_balance(user_id, self.DEFAULT_TOKEN_BALANCE)
        logger.info(f"Start command received from user {user.id} in chat {chat_id}")
        
        keyboard = self.get_main_keyboard()
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞) - –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –±–æ–ª—å—à–æ–π, –ª—É—á—à–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª:",
            reply_markup=keyboard
        )
        # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏ –ª–∏–º–∏—Ç–∞—Ö
        await update.message.reply_text(
            f"{update.message.text}\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"–õ–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∞–Ω–∞–ª–∏–∑: {self.PAGE_LIMIT}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ /limits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏–º–∏—Ç–æ–≤."
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "ü§ñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "   /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "   /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "   /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\n"
            "   /add_tokens - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤\n"
            "   /limits - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
            "üìÑ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:</b>\n"
            "‚Ä¢ TXT - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ DOC/DOCX - –¥–æ–∫—É–º–µ–Ω—Ç—ã Word\n"
            "‚Ä¢ PDF - –¥–æ–∫—É–º–µ–Ω—Ç—ã PDF (–±–µ–∑ OCR)\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ç–æ–∫–µ–Ω–æ–≤.\n"
            "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML
        )




    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return

        text = update.message.text
        chat_id = update.effective_chat.id
        
        logger.info(f"Received message from {chat_id}: {text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text in ["–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É", "–ü–æ–º–æ—â—å", "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"]:
            logger.info(f"Processing menu button: {text}")
            await self.handle_button(update, context)
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text(
                "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            
            structure = context.user_data.get('selected_structure', "Auto-detect")
            logger.info(f"Processing text with structure: {structure}")
            
            await self.process_text(update, context, text, structure)
            await processing_message.delete()
                
        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            logger.error(f"Error in handle_message: {e}", exc_info=True)
            await update.message.reply_text(error_message)

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏"""
        if not update.message:
            return
            
        text = update.message.text
        chat_id = update.effective_chat.id
        logger.info(f"Processing button press from {chat_id}: {text}")
        
        if text == "–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É":
            await self.choose_structure(update, context)
        elif text == "–ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        elif text == "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã":
            context.user_data['selected_structure'] = "Auto-detect"
            await update.message.reply_text(
                "‚úÖ –í—ã–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )

    async def choose_structure(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        keyboard = [
            [InlineKeyboardButton(
                StructureType.get_display_name(structure.value),
                callback_data=structure.value
            )]
            for structure in StructureType if structure != StructureType.AUTO_DETECT
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            'üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:',
            reply_markup=reply_markup
        )

    async def button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        if not query:
            return

        logger.info(f"Received callback query: {query.data}")
        
        try:
            await query.answer()
            chat_id = update.effective_chat.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            context.user_data['selected_structure'] = query.data
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞
            structure_name = StructureType.get_display_name(query.data)
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_name}\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            
            logger.info(f"Structure selected for chat {chat_id}: {query.data}")
            
        except Exception as e:
            logger.error(f"Error in button handler: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤"""
        if not update.message or not update.message.document:
            logger.error("No document in update")
            return
                
        try:
            document = update.message.document
            file_name = document.file_name
            file_extension = Path(file_name).suffix.lower()
            
            logger.info(f"Received document: {file_name} (mime type: {document.mime_type})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            supported_extensions = {'.txt', '.doc', '.docx', '.pdf'}
            if file_extension not in supported_extensions:
                await update.message.reply_text(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ TXT - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n"
                    "‚Ä¢ DOC/DOCX - –¥–æ–∫—É–º–µ–Ω—Ç—ã Word\n"
                    "‚Ä¢ PDF - –¥–æ–∫—É–º–µ–Ω—Ç—ã PDF"
                )
                return

            processing_message = await update.message.reply_text(
                f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª {file_name}..."
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await document.get_file()
            logger.info(f"Got file object: {file.file_id}")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_file = Path(temp_dir) / file_name
                logger.info(f"Downloading file to: {temp_file}")
                
                try:
                    await file.download_to_drive(str(temp_file))
                    logger.info("File downloaded successfully")
                    
                    text = None
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
                    if file_extension == '.txt':
                        logger.info("Processing TXT file")
                        with open(temp_file, 'r', encoding='utf-8') as f:
                            text = f.read()
                            
                    elif file_extension in ['.doc', '.docx']:
                        logger.info("Processing DOC/DOCX file")
                        text = extract_doc_text(temp_file)
                            
                    elif file_extension == '.pdf':
                        logger.info("Processing PDF file")
                        text = extract_text_from_pdf(temp_file)

                    if not text or not text.strip():
                        await processing_message.edit_text(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. "
                            "–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                        )
                        return

                    logger.info(f"Successfully extracted text, length: {len(text)}")
                    structure = context.user_data.get('selected_structure', "Auto-detect")
                    await self.process_text(update, context, text, structure)
                    await processing_message.delete()

                except Exception as e:
                    logger.error(f"Error processing file: {str(e)}", exc_info=True)
                    await processing_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
                    )
                    
        except Exception as e:
            logger.error(f"Error in handle_document: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            user_data = self.db.get_user_data(user_id)
            if user_data is None or "token_balance" not in user_data:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ,
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                balance = self.DEFAULT_TOKEN_BALANCE
                self.db.update_user_balance(user_id, balance)
            else:
                balance = user_data["token_balance"]
            
            await update.message.reply_text(
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Error in balance_command for user {user_id}: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.HTML
            )


    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:\n"
            f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∞–Ω–∞–ª–∏–∑: {self.PAGE_LIMIT}\n"
            f"- –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.TOKENS_PER_PAGE}\n"
            f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑: {self.PAGE_LIMIT * self.TOKENS_PER_PAGE}"
        )

    async def add_tokens_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        try:
            amount = int(context.args[0])
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            
            await context.bot.send_message(
                chat_id=self.admin_id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤.\n"
                     f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                     f"/approve_tokens {user.id} {amount}"
            )
            
            await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /add_tokens 1000")

    async def approve_tokens_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = int(context.args[0])
            amount = int(context.args[1])
            new_balance = self.balance_service.add_tokens(user_id, amount)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ–¥–æ–±—Ä–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ç–æ–∫–µ–Ω–æ–≤."
            )
            
            await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        except (IndexError, ValueError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /approve_tokens <user_id> <amount>")

    async def process_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, structure: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        user_data = self.db.get_user_data(user_id)
        logger.info(f"Processing text for chat {chat_id} with structure {structure}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "token_balance" not in user_data:
            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_data["token_balance"] = self.DEFAULT_TOKEN_BALANCE
            self.db.update_user_balance(user_id, self.DEFAULT_TOKEN_BALANCE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
        if user_data["token_balance"] <= 0:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
            return

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
        estimated_tokens = len(text.split()) * 4  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 4 —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–ª–æ–≤–æ
        current_balance = self.balance_service.get_balance(user_id)

        if estimated_tokens > user_data["token_balance"]:
            await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ {estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤, –∞ —É –≤–∞—Å {user_data['token_balance']}.")
            return
        
        try:
            if structure == "Auto-detect":
                try:
                    structure = self.evaluator.classify(text)
                    logger.info(f"Auto-detected structure: {structure}")
                except Exception as e:
                    logger.error(f"Error in structure classification: {e}")
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é."
                    )
                    return

            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                result = self.evaluator.evaluate(text, structure)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                tokens_used = result.get('tokens_used', len(text.split()) * 4)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                current_balance = self.balance_service.get_balance(user_id)
                if current_balance < tokens_used:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {tokens_used}, –¥–æ—Å—Ç—É–ø–Ω–æ: {current_balance}."
                    )
                    return
                    
                new_balance = self.balance_service.use_tokens(user_id, tokens_used)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
                structure_name = result.get('structure_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
                evaluation_text = result.get('llm_evaluation', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
                main_response = (
                    "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                    f"<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞</b>: {structure_name}\n\n"
                    f"<b>–ê–Ω–∞–ª–∏–∑</b>:\n{evaluation_text}"
                )
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
                tokens_info = (
                    f"\n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</b>: {tokens_used}\n"
                    f"<b>–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤</b>: {new_balance}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                await update.message.reply_text(
                    main_response, 
                    parse_mode=ParseMode.HTML
                )
                
                await update.message.reply_text(
                    tokens_info,
                    parse_mode=ParseMode.HTML
                )
                
            except Exception as e:
                logger.error(f"Error in analysis: {e}", exc_info=True)
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                    
        except Exception as e:
            logger.error(f"Error in process_text: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}", exc_info=True)
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
